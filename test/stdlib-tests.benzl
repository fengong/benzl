(load "test/test-runner")

(printf "----")
(printf "Running tests...")

(printf "----")
(printf "Testing comparators...")
(printf "----")

; basic equality tests
(assert-equal '1' 1)
(assert-equal '0' 0)
(assert-equal '"hello"' "hello")

; true / false aliases tests
(assert-equal '(true)' 1)
(assert-equal '(false)' 0)

; = tests
(assert-equal '(== true 1)' true)
(assert-equal '(== false 1)' false)
(assert-equal '(== 8 8)' true)
(assert-equal '(== 8 16)' false)
(assert-equal '(== -8 -8)' true)
(assert-equal '(== -8 8)' false)
(assert-equal '(== 1.0 1)' true)
(assert-equal '(== 1.0 0.9)' false)
(assert-equal '(== 0xFF 0xFF)' true)
(assert-equal '(== 0xFF 0x00)' false)
(assert-equal '(== "hello" "hello")' true)
(assert-equal '(== "hello" "goodbye")' false)
(assert-equal '(== {1 2 3} {1 2 3})' true)
(assert-equal '(== {"1" "2" "3"} {1 2 3})' false)
(assert-equal '(== {"1" "2" "3"} {"1" "2" "3"})' true)
(assert-error '(== 1)')
(assert-error '(==)')

; != tests
(assert-equal '(!= false true)' 1)
(assert-equal '(!= true 0)' 1)
(assert-equal '(!= false 0)' 0)
(assert-equal '(!= 8 8)' 0)
(assert-equal '(!= 8 -8)' 1)
(assert-equal '(!= 8 16)' 1)
(assert-equal '(!= 1.0 1)' 0)
(assert-equal '(!= 1 0.9)' 1)
(assert-equal '(!= 0xFF 0xFF)' false)
(assert-equal '(!= 0xFF 0x00)' true)
(assert-equal '(!= "hello" "hello")' 0)
(assert-equal '(!= "hello" "goodbye")' 1)
(assert-equal '(!= {1 2 3} {1 2 3})' false)
(assert-equal '(!= {"1" "2" "3"} {1 2 3})' true)
(assert-equal '(!= {"1" "2" "3"} {"1" "2" "3"})' false)
(assert-error '(!= 1)')
(assert-error '(!=)')

; > tests
(assert-equal '(> true false)' 1)
(assert-equal '(> false true)' 0)
(assert-equal '(> 16 8)' 1)
(assert-equal '(> 16 -17)' 1)
(assert-equal '(> -17 -18)' 1)
(assert-equal '(> -18 0)' 0)
(assert-equal '(> 1.0 0.5)' 1)
(assert-equal '(> -1.0 0.5)' 0)
(assert-equal '(> 0 -0.5)' 1)
(assert-equal '(> 0xFF 0xFF)' false)
(assert-equal '(> 0xFF 0x00)' true)
(assert-equal '(> "b" "a")' 1)
(assert-equal '(> "a" "b")' 0)
(assert-equal '(> {"b" "a"})' 1)
(assert-equal '(> {"a" "b"})' 0)
(assert-equal '(> {"abc1" "abc2"})' 0)
(assert-error '(> {"a"} {"b"})')
(assert-error '(> "bird" {"b"})')
(assert-error '(> {"b"} "sheep")')
(assert-error '(> 1)')
(assert-error '(>)')

; < tests
(assert-equal '(< true false)' 0)
(assert-equal '(< false true)' 1)
(assert-equal '(< 16 8)' 0)
(assert-equal '(< 16 -17)' 0)
(assert-equal '(< -17 -18)' 0)
(assert-equal '(< -18 0)' 1)
(assert-equal '(< 1.0 0.5)' 0)
(assert-equal '(< -1.0 0.5)' 1)
(assert-equal '(< 0 -0.5)' 0)
(assert-equal '(< 0xFF 0xFF)' false)
(assert-equal '(< 0x00 0xFF)' true)
(assert-equal '(< "b" "a")' 0)
(assert-equal '(< "a" "b")' 1)
(assert-equal '(< {"b" "a"})' 0)
(assert-equal '(< {"a" "b"})' 1)
(assert-equal '(< {"abc1" "abc2"})' 1)
(assert-error '(< {"a"} {"b"})')
(assert-error '(< "bird" {"b"})')
(assert-error '(< {"b"} "sheep")')
(assert-error '(< 1)')
(assert-error '(<)')

; >= tests
(assert-equal '(>= true false)' 1)
(assert-equal '(>= 8 4)' 1)
(assert-equal '(>= -4 -8)' 1)
(assert-equal '(>= false true)' 0)
(assert-equal '(>= 4 8)' 0)
(assert-equal '(>= -8 -4)' 0)
(assert-equal '(>= 1.0 0.5)' 1)
(assert-equal '(>= -1.0 0.5)' 0)
(assert-equal '(>= 0 -0.5)' 1)
(assert-equal '(>= 0xFF 0xFF)' true)
(assert-equal '(>= 0xFF 0x00)' true)
(assert-equal '(>= 0xFE 0xFF)' false)
(assert-equal '(>= "b" "a")' 1)
(assert-equal '(>= "a" "b")' 0)
(assert-equal '(>= "a" "a")' 1)
(assert-equal '(>= {"b" "a"})' 1)
(assert-equal '(>= {"a" "b"})' 0)
(assert-equal '(>= {"a" "a"})' 1)
(assert-equal '(>= {"abc1" "abc2"})' 0)
(assert-error '(>= {"a"} {"b"})')
(assert-error '(>= "bird" {"b"})')
(assert-error '(>= {"b"} "sheep")')
(assert-error '(>= 1)')
(assert-error '(>=)')

; <= tests
(assert-equal '(<= true false)' 0)
(assert-equal '(<= 8 4)' 0)
(assert-equal '(<= -4 -8)' 0)
(assert-equal '(<= false true)' 1)
(assert-equal '(<= 4 8)' 1)
(assert-equal '(<= -8 -4)' 1)
(assert-equal '(<= 1.0 0.5)' 0)
(assert-equal '(<= -1.0 0.5)' 1)
(assert-equal '(<= 0 -0.5)' 0)
(assert-equal '(<= 0xFF 0xFF)' true)
(assert-equal '(<= 0x00 0xFF)' true)
(assert-equal '(<= 0xFF 0xFE)' false)
(assert-equal '(<= "b" "a")' 0)
(assert-equal '(<= "a" "b")' 1)
(assert-equal '(<= "a" "a")' 1)
(assert-equal '(<= {"b" "a"})' 0)
(assert-equal '(<= {"a" "b"})' 1)
(assert-equal '(<= {"a" "a"})' 1)
(assert-equal '(<= {"abc1" "abc2"})' 1)
(assert-error '(<= {"a"} {"b"})')
(assert-error '(<= "bird" {"b"})')
(assert-error '(<= {"b"} "sheep")')
(assert-error '(<= 1)')
(assert-error '(<=)')

; min tests
(assert-equal '(min 5 4 9 10)' 4)
(assert-equal '(min 5 -4 9 -10)' -10)
(assert-equal '(min {5.0 -4 9 -10})' -10)
(assert-equal '(min 5 -4 -99.0 -10)' -99)
(assert-equal '(min 0xFF 0xFF)' 0xFF)
(assert-equal '(min 0x00 0xFF)' 0x00)
(assert-equal '(min "b" "a" "c" "d")' "a")
(assert-equal '(min {"b" "a" "c" "d"})' "a")
(assert-equal '(min {2 "3" "1" "4"})' "1")
(assert-error '(min {"b"} {"a"})')
(assert-error '(min {"b"} "fish")')
(assert-error '(min 1)')
(assert-error '(min)')

; max tests
(assert-equal '(max 5 4 9 10)' 10)
(assert-equal '(max 5 -4 9 -10)' 9)
(assert-equal '(max {5 -4 9 -10})' 9)
(assert-equal '(max 5 -4 -99.0 -10)' 5)
(assert-equal '(max 0xFF 0xFF)' 0xFF)
(assert-equal '(max 0x00 0xFF)' 0xFF)
(assert-equal '(max "b" "a" "c" "d")' "d")
(assert-equal '(max {"b" "a" "c" "d"})' "d")
(assert-equal '(max {2 "3" "1" "4"})' "4")
(assert-error '(max {"b"} {"a"})')
(assert-error '(max {"b"} "fish")')
(assert-error '(max 1)')
(assert-error '(max)')

(printf "----")
(printf "Testing basic operators...")

; + tests
(assert-equal '(+ 2 2)' 4)
(assert-equal '(+ -2 4)' 2)
(assert-equal '(+ 1 2.75)' 3.75)
(assert-equal '(+ 1.25 -0.25)' 1)
(assert-equal '(+ 0x00 0x01)' 0x01)
(assert-equal '(+ 0x01 0x01)' 0x02)
(assert-equal '(+ 0xFF 0x01)' 0x00)
(assert-equal '(+ 0xFF 0xFF)' 0xFE)
(assert-equal '(+ 0xFE 1)' 255)
(assert-equal '(+ 0xFF 1)' 256)
(assert-equal '(+ 0x00 0.25)' 0.25)
(assert-equal '(+ 0x00 -0.25)' -0.25)
(assert-equal '(+ "Hello" 0)' "Hello0")
(assert-equal '(+ 0 "Hello" 0)' "0Hello0")
(assert-equal '(+ "Hi" "Hello" -0.25)' "HiHello-0.25")
(assert-equal '(+ "Hi" 0x48)' (buffer-with-bytes 0x48 0x69 0x00 0x48))
(assert-equal '(+ "Hi" "Hello" {1 2 3})' {"Hi" "Hello" 1 2 3})

; - tests
(assert-equal '(- 3 2)' 1)
(assert-equal '(- -3 2)' -5)
(assert-equal '(- 1 2.75)' -1.75)
(assert-equal '(- 1.25 -0.25)' 1.5)
(assert-equal '(- 0x00 0x01)' 0xFF)
(assert-equal '(- 0x01 0x01)' 0x00)
(assert-equal '(- 0xFF 0xFE)' 0x01)
(assert-equal '(- 0xFF 0xFF)' 0x00)
(assert-equal '(- 0xFF 1)' 254)
(assert-equal '(- 0x00 1)' -1)
(assert-equal '(- 0x00 0.25)' -0.25)
(assert-equal '(- 0x00 -0.25)' 0.25)
(assert-error '(- "Hello" 8)')
(assert-error '(- {1 2 3} 8)')
(assert-error '(- (dict) 8)')
(assert-error '(- Integer 8)')

; * tests
(assert-equal '(* 2 2)' 4)
(assert-equal '(* -2 2)' -4)
(assert-equal '(* 2 2.5)' 5)
(assert-equal '(* -2 2.5)' -5)
(assert-equal '(* 0xFF 2)' 510)
(assert-equal '(* 0xFF 2.5)' 637.5)
(assert-equal '(* 0xFF -2)' -510)
(assert-equal '(* 0xFF -2.5)' -637.5)
(assert-almost-equal '(* 0xFF 1.333)' 339.915)
(assert-error '(* "Hello" 8)')
(assert-error '(* {1 2 3} 8)')
(assert-error '(* (dict) 8)')
(assert-error '(* Integer 8)')

; / tests
(assert-equal '(/ 4 2)' 2)
(assert-equal '(/ 4 8)' 0)
(assert-equal '(/ 4.0 8)' 0.5)
(assert-error '(/ 4 0)')
(assert-error '(/ -4 0)')
(assert-error '(/ 4.0 0)')
(assert-error '(/ -4.0 0)')
(assert-error '(/ 0xFF 0)')
(assert-equal '(/ 0 4)' 0)
(assert-equal '(/ 0 4.0)' 0)
(assert-equal '(/ 0 0xFF)' 0)
(assert-equal '(/ 0xFF 2)' 127)
(assert-equal '(/ 0xFF 2.5)' 102)
(assert-equal '(/ 0xFF -2)' -127)
(assert-equal '(/ 0xFF -2.5)' -102)
(assert-almost-equal '(/ 0xFF 1.333)' 191.2978244561)
(assert-error '(/ "Hello" 8)')
(assert-error '(/ {1 2 3} 8)')
(assert-error '(/ (dict) 8)')
(assert-error '(/ Integer 8)')

; % tests
(assert-equal '(% 5 8)' 5)
(assert-equal '(% 5 4)' 1)
(assert-error '(% 10 0)')
(assert-error '(% -10 0)')
(assert-error '(% 10.5 0)')
(assert-error '(% -10.5 0)')
(assert-error '(% 0xFF 0)')
(assert-equal '(% 5.5 4)' 1.5)
(assert-equal '(% 0xFF 2)' 1)
(assert-equal '(% 0xFF 2.0)' 1)
(assert-equal '(% 0xFF 0x02)' 0x01)
(assert-equal '(% 0xFF -2)' 1)
(assert-equal '(% 0xFF -2.5)' 0)
(assert-almost-equal '(% 0xFF 1.333)' 0.397)
(assert-error '(% "Hello" 8)')
(assert-error '(% {1 2 3} 8)')
(assert-error '(% (dict) 8)')
(assert-error '(% Integer 8)')

; << tests
(assert-equal '(<< 0x000000FF 8)' 0x0000FF00)
(assert-equal '(<< 0x000000FF 24)' 0xFF000000)
(assert-error '(<< 0.01 8)')
(assert-error '(<< "Hello" 8)')
(assert-error '(<< {1 2 3} 8)')
(assert-error '(<< (dict) 8)')
(assert-error '(<< Integer 8)')

; >> tests
(assert-equal '(>> 0xFF0000FF 8)' 0x00FF0000)
(assert-equal '(>> 0x00FF00FF 16)' 0x000000FF)
(assert-error '(>> 0.01 8)')
(assert-error '(>> "Hello" 8)')
(assert-error '(>> {1 2 3} 8)')
(assert-error '(>> (dict) 8)')
(assert-error '(>> Integer 8)')

; & tests
(assert-equal '(& 0x000000FF 0xFFFFFFFF)' 0x000000FF)
(assert-error '(& "Hello" 8)')
(assert-error '(& {1 2 3} 8)')
(assert-error '(& (dict) 8)')
(assert-error '(& Integer 8)')

; | tests
(assert-equal '(| 0xFF0000FF 0xFFFFFF00)' 0xFFFFFFFF)
(assert-error '(| "Hello" 8)')
(assert-error '(| {1 2 3} 8)')
(assert-error '(| (dict) 8)')
(assert-error '(| Integer 8)')

; ^ tests
(assert-equal '(^ 0xFF0000FF 0x00FF00FF)' 0xFFFF0000)
(assert-error '(^ "Hello" 8)')
(assert-error '(^ {1 2 3} 8)')
(assert-error '(^ (dict) 8)')
(assert-error '(^ Integer 8)')

(printf "----")
(printf "Testing logical operators...")
(printf "----")

; logical or tests
(assert-true '(or 1 0 0)')
(assert-true '(or 0 -1 0)')
(assert-true '(or 1 -1 0)')
(assert-false '(or 0 0 0)')
(assert-true '(or 0.001 0 0)')
(assert-false '(or 0x00 0 0)')
(assert-true '(or 0x01 0 0)')
(assert-true '(or 0x01 0 0)')
(assert-true '(or "hello" 0 0)')


; logical and tests
(assert-true '(and 1 1 1)')
(assert-true '(and 1.0 1 0x01)')
(assert-false '(and 0 1 0)')
(assert-false '(and 0x01 0 -1)')
(assert-true '(and -1 -1 -1)')
(assert-true '(and "hello" "hello" "hello")')
(assert-false '(and "hello" 0 0)')

; logical not tests
(assert-true '(not 0 0 0)')
(assert-false '(not 1 0 0)')
(assert-false '(not 0 -1 0)')
(assert-false '(not 1 1 1)')
(assert-false '(not 1.0 0 0)')
(assert-false '(not 0 0x01 0)')
(assert-false '(not "hello" 0 0)')


(printf "----")
(printf "Testing functions...")
(printf "----")
(assert-equal '(fun {my-func} {"hello"})(type-of my-func)' Function)
(assert-equal '(def {my-func} (lambda {} {"hello"}))(type-of my-func)' Function)
(assert-equal '(fun {my-func x} {x})(type-of my-func)' Function)
(assert-equal '(def {my-func} (lambda {x} {x}))(type-of my-func)' Function)
(assert-equal '(fun {my-func x & y} {x})(type-of my-func)' Function)
(assert-equal '(def {my-func} (lambda {x & y} {x}))(type-of my-func)' Function)
(assert-equal '(fun {my-func x} {x})(my-func true)' true)
(assert-equal '(def {my-func} (lambda {x} {x}))(my-func true)' true)
(assert-error '(fun {my-func x} {x})(my-func)')
(assert-error '(def {my-func} (lambda {x} {x}))(my-fun)')
(assert-error '(fun {my-func x} {x})(my-func 1 2)')
(assert-error '(def {my-func} (lambda {x} {x}))(my-fun 1 2)')
(assert-equal '(curry + {2 2})' 4)
(assert-equal '(uncurry min 3 2 1)' 1)
(assert-equal '(((lambda {x} {* x 2}) 2))' 4)
(assert-equal '(do (fun {my-func arg1 arg2} {+ arg1 arg2}) (my-func 2 2))' 4)
(assert-equal '(do (fun {my-func & args} {curry + args}) (my-func 2 2 2))' 6)
(assert-equal '(compose (lambda {x} {* x 5}) (lambda {x} {* x 2}) 2 )' 20)
(assert-equal '(def {fa fb} (lambda {x} {* x 5}) (lambda {x} {* x 2})) (compose fa fb 2)' 20)
(assert-equal '(do (fun {my-func} {"hello"}) (my-func))' "hello")

(printf "----")
(printf "Testing variables...")
(printf "----")
(assert-equal '(def {x} 0x01) x' 0x01)
(assert-equal '(def {x} 2) x' 2)
(assert-almost-equal '(def {x} 3.33) x' 3.33)
(assert-equal '(def {x} "hello") x' "hello")
(assert-equal '(def {x} {1 2 3}) x' {1 2 3})
(assert-equal '(def {x} Integer) x' Integer)
(assert-equal '(def {x} (dict)) x' (dict))
(assert-equal '(def {x} 0x01) x' 0x01)
(assert-error '(def {x} 1)(def {x} 2)')
(assert-error '(set {not-defined} 1)')
(assert-equal '(def {x} 0x01) (set {x} 0x02) x' 0x02)

(printf "----")
(printf "Testing variable type specifiers...")
(printf "----")

(assert-error '(def {x:Rubbish} 12)')

(def {byte:Byte} 0x01)
(assert-equal 'byte' 0x01)
(assert-equal '(set {byte} 0x01) byte' 0x01)
(assert-equal '(set {byte} 2) byte' 0x02)
(assert-equal '(set {byte} 3.33) byte' 0x03)
(assert-error '(set {byte} "hello")')
(assert-error '(set {byte} {1 2 3})')
(assert-error '(set {byte} Float)')

(def {int:Integer} 10)
(assert-equal 'int' 10)
(assert-equal '(set {int} 0x01) int' 1)
(assert-equal '(set {int} 2) int' 2)
(assert-equal '(set {int} 3.33) int' 3)
(assert-error '(set {int} "hello")')
(assert-error '(set {int} {1 2 3})')
(assert-error '(set {int} Float)')

(def {flt:Float} 10)
(assert-equal 'flt' 10)
(assert-equal '(set {flt} 0x01) flt' 1)
(assert-equal '(set {flt} 2) flt' 2)
(assert-almost-equal '(set {flt} 3.33) flt' 3.33)
(assert-error '(set {flt} "hello")')
(assert-error '(set {flt} {1 2 3})')
(assert-error '(set {flt} Float)')

(def {y:String} "hello")
(assert-equal 'y' "hello")
(assert-equal '(set {y} "hello") y' "hello")
(assert-error '(set {y} 0x00)')
(assert-error '(set {y} 1)')
(assert-error '(set {y} 1.0)')
(assert-error '(set {y} {1 2 3})')
(assert-error '(set {y} Integer)')

(printf "----")
(printf "Testing function type specifiers...")
(printf "----")

(assert-error '(def {f} (lambda {x:Meh} {+ x 1}))')
(assert-error '(def {f} (lambda {x:Integer} {+ x 1})) (f x:10))')

(def-type {MyType z:Float})
(assert-equal '(def {f} (lambda {x:Float y:MyType} {format "%,%" x (y z)})) (f 10 (MyType z:11))' '10,11')
(assert-error '(def {f} (lambda {x:Float y:MyType z:Bodge} {}))')
(assert-equal '(fun {f2 x:Float y:MyType} {format "%,%" x (y z)}) (f2 10 (MyType z:11))' '10,11')
(assert-error '(fun {f2 x:Float y:MyType z:Bodge} {})')
(assert-error '(def-type {Integer x y})')

(fun {add-two-bytes x:Byte y:Byte} {+ x y})
(assert-equal '(add-two-bytes 0x01 0x03)' 0x04)
(assert-equal '(add-two-bytes 1 2)' 3)
(assert-equal '(add-two-bytes 1.1 2.1)' 3.0)
(assert-error '(add-two-bytes 1.0 "two")')
(assert-error '(add-two-bytes 1.0 {2})')
(assert-error '(add-two-bytes 1.0 Byte)')

(fun {add-two-ints x:Integer y:Integer} {+ x y})
(assert-equal '(add-two-ints 0x01 0x03)' 0x04)
(assert-equal '(add-two-ints 1 2)' 3)
(assert-equal '(add-two-ints 1.1 2.1)' 3.0)
(assert-error '(add-two-ints 1.0 "two")')
(assert-error '(add-two-ints 1.0 {2})')
(assert-error '(add-two-ints 1.0 Integer)')

(fun {add-two-floats x:Float y:Float} {+ x y})
(assert-equal '(add-two-floats 0x01 0x03)' 0x04)
(assert-equal '(add-two-floats 1 2)' 3)
(assert-almost-equal '(add-two-floats 1.1 2.2)' 3.3)
(assert-error '(add-two-floats 1.0 "two")')
(assert-error '(add-two-floats 1.0 {2})')
(assert-error '(add-two-floats 1.0 Integer)')

(fun {add-two-strings x:String y:String} {+ x y})
(assert-equal '(add-two-strings "hello" "again")' "helloagain")
(assert-error '(add-two-strings 0x01 0x02)')
(assert-error '(add-two-strings 1 1)')
(assert-error '(add-two-strings 1.1 2.2)')
(assert-error '(add-two-strings {1 2 3} {4 5 6})')
(assert-error '(add-two-strings String Float)')

(fun {add-two-lists x:List y:List} {+ x y})
(assert-equal '(add-two-lists {1 2 3} {4 5 6})' {1 2 3 4 5 6})
(assert-error '(add-two-lists 0x01 0x02)')
(assert-error '(add-two-lists 1 1)')
(assert-error '(add-two-lists 1.1 2.2)')
(assert-error '(add-two-lists "123" "456")')
(assert-error '(add-two-lists String Float)')

(fun {make-type-list x:Type y:Type} {list x y})
(assert-equal '(make-type-list Integer Float)' {Integer Float})
(assert-error '(make-type-list 0x01 0x02)')
(assert-error '(make-type-list 1 1)')
(assert-error '(make-type-list 1.1 2.2)')
(assert-error '(make-type-list "123" "456")')
(assert-error '(make-type-list {1 2 3} {4 5 6})')

(def {greet} (lambda {greeting:String name:String} {format "%, %!" greeting name}))
(assert-equal '(greet "Hello" "Ben")' "Hello, Ben!")
(assert-error '(greet "Bonjour" 0x00)')
(assert-error '(greet 1.1 2.1)')
(assert-error '(greet 1.0 "Ben")')
(assert-error '(greet 1.0 {2})')
(assert-error '(greet 1.0 Byte)')

(printf "----")
(printf "Testing custom types...")
(printf "----")
(def-type {MyPoint1 x y})
(assert-equal '(def {pnt} (MyPoint1 x:10 y:10)) pnt' (MyPoint1 x:10 y:10))
(assert-error '(def {pnt} (MyPoint1 x:2 y:4))(def {pnt} (MyPoint1 x:3 y:4))')
(assert-equal '(def {pnt} (MyPoint1 x:2 y:4))(set {pnt} (MyPoint1 x:3 y:5)) pnt' (MyPoint1 x:3 y:5))
(assert-equal '(def {pnt} (MyPoint1 x:2 y:4))(set-prop {pnt x} 6) pnt' (MyPoint1 x:6 y:4))
(assert-error '(def {pnt} (MyPoint1 x:2))')
(assert-error '(def {pnt} (MyPoint1 x:2 z:2))')
(assert-error '(def {pnt} (MyPoint1 x:10 y:10)) (pnt z)')
(assert-error '(def {pnt} (MyPoint1 x:10 y:10)) (set-prop {pnt z} 8)')

(def-type {MyPoint2 x:Float y:Float})
(assert-equal '(def {pnt} (MyPoint2 x:10 y:10)) pnt' (MyPoint2 x:10 y:10))
(assert-error '(def {pnt} (MyPoint2 x:2 y:4))(def {pnt} (MyPoint2 x:3 y:4))')
(assert-equal '(def {pnt} (MyPoint2 x:2 y:4))(set {pnt} (MyPoint2 x:3 y:5)) pnt' (MyPoint2 x:3 y:5))
(assert-equal '(def {pnt} (MyPoint2 x:2 y:4))(set-prop {pnt x} 6) pnt' (MyPoint2 x:6 y:4))
(assert-error '(def {pnt} (MyPoint2 x:"hello" y:4))')
(assert-error '(def {pnt} (MyPoint2 x:2))')
(assert-error '(def {pnt} (MyPoint2 x:2 z:2))')
(assert-error '(def {pnt} (MyPoint1 x:10 y:10)) (pnt z)')
(assert-error '(def {pnt} (MyPoint1 x:10 y:10)) (set-prop {pnt z} 8)')

(assert-error '(def-type {MyPoint2 x:Float y:Bodge})')


(printf "----")
(printf "Testing evaluation...")
(printf "----")
(assert-equal '({+ 1 2})' {+ 1 2})
(assert-equal '(eval {+ 1 2})' 3)
(assert-error '(eval {+ 1 2)')
(assert-equal '(eval-string "(+ 1 2)")' 3)
(assert-error '(eval-string "(+ 1 2")')

(printf "----")
(printf "Testing conditionals...")
(printf "----")

(assert-true '(if (true) {true} {false})')
(assert-false '(if (false) {true} {false})')
(assert-true '(if (or 0 1 2) {true} {false})')
(assert-false '(if (or 0 0 0) {true} {false})')
(assert-false '(if (and 0 1 2) {true} {false})')
(assert-true '(if (and 1 1 2) {true} {false})')
(assert-false '(if (not 0 0 1) {true} {false})')
(assert-true '(if (not 0 0 0) {true} {false})')

(printf "----")
(printf "Testing control structures...")
(printf "----")

(assert-true '(cond {(true) true} {(false) false})')
(assert-true '(cond {(== 1 0) false} {(== 2 0) false} {(== 0 0) true})')
(assert-true '(cond {(== 1 0) false} {(== 2 0) false} {else true})')

(assert-true '(do (false) (false) (true))')
(assert-equal '(do (def {x} 1) (set {x} 2) x)' 2)
(assert-equal '(do (def {x} 1)(loop 10 (lambda {n} {set {x} (* x 2)})) x)' 1024)
(assert-equal '(do (def {x} 1)(loop 10 (lambda {n} {set {x} n})) x)' 9)


(printf "----")
(printf "Testing errors...")
(printf "----")

(assert-error '(error "This is an error")')
(assert-true '(try {error "Yikes!"} {catch e {true}})')
(assert-false '(try {false} {catch e {true}})')


(printf "----")
(printf "Testing list functions...")
(printf "----")
(def {mylist} {1 2 3 4 5})
(assert-equal '(len mylist)' 5)
(assert-equal '(head mylist)' {1})
(assert-equal '(tail mylist)' {2 3 4 5})
(assert-equal '(join mylist {6 7 8})' {1 2 3 4 5 6 7 8})
(assert-equal '(first mylist)' 1)
(assert-equal '(second mylist)' 2)
(assert-equal '(last mylist)' 5)
(assert-equal '(nth 3 mylist)' 4)
(assert-equal '(take 2 mylist)' {1 2})
(assert-equal '(drop 2 mylist)' {3 4 5})
(assert-equal '(pad 10 0 mylist)' {1 2 3 4 5 0 0 0 0 0})
(assert-equal '(join mylist {6 7 8})' {1 2 3 4 5 6 7 8})
(assert-equal '(+ mylist {6 7 8})' {1 2 3 4 5 6 7 8})
(assert-equal '(take 2 mylist)' {1 2})
(assert-error '(take 10 mylist)')
(assert-equal '(drop 2 mylist)' {3 4 5})
(assert-error '(drop 10 mylist)')
(assert-equal '(split-at 2 mylist)' {{1 2} {3 4 5}})
(assert-error '(split-at mylist 2)')
(assert-error '(split-at "hello" mylist)')
(assert-error '(split-at 10 mylist)')
(assert-equal '(split-by 3 mylist)' {{1 2} {4 5}})
(assert-equal '(split-by "eep" mylist)' {{1 2 3 4 5}})
(assert-error '(split-by 3 3)')
(assert-true '(contains 2 mylist)')
(assert-false '(contains 6 mylist)')
(assert-true '(contains "hello" {"hello" "there"})')
(assert-false '(contains "goodbye" {"hello" "there"})')
(assert-true '(contains 1.1 {1.1 1.2})')
(assert-false '(contains 1.3 {1.1 1.2})')
(assert-equal '(map - mylist)' {-1 -2 -3 -4 -5})
(assert-equal '(map (lambda {x} {+ x 1}) mylist)' {2 3 4 5 6})
(assert-equal '(map-with-iterator (lambda {x i} {+ x i}) mylist)' {1 3 5 7 9})
(assert-equal '(filter (lambda {x} {> x 2}) mylist)' {3 4 5})
(assert-equal '(reduce - 0 mylist)' -15)
(assert-equal '(reverse mylist)' {5 4 3 2 1})
(assert-equal '(max mylist)' 5)
(assert-equal '(min mylist)' 1)
(assert-equal '(max (map - mylist))' -1)
(assert-equal '(min (map - mylist))' -5)
(assert-equal '(index-of 3 mylist)' 2)
(assert-equal '(index-of 6 mylist)' -1)
(assert-equal '(splice 0 0 "hello" mylist)' {"hello" 1 2 3 4 5})
(assert-equal '(splice 1 0 "hello" mylist)' {1 "hello" 2 3 4 5})
(assert-equal '(splice 1 1 "hello" mylist)' {1 "hello" 3 4 5})
(assert-error '(splice 8 1 "hello" mylist)')
(assert-equal '(slice 1 1 mylist)' {2})
(assert-equal '(slice 2 2 mylist)' {3 4})
(assert-error '(slice 8 2 mylist)')
(assert-equal '(nth 2 mylist)' 3)
(assert-error '(nth 5 mylist)')
(assert-equal '(sort {4 5 2 1 3})' {1 2 3 4 5})
(assert-equal '(rsort {4 5 2 1 3})' {5 4 3 2 1})
(assert-equal '(sort {4 -5 2 -1 3})' {-5 -1 2 3 4})
(assert-equal '(rsort {4 -5 2 -1 3})' {4 3 2 -1 -5})
(assert-equal '(sort {0.4 -5 -2.1 -1 3})' {-5 -2.1 -1 0.4 3})
(assert-equal '(rsort {0.4 -5 -2.1 -1 3})' {3 0.4 -1 -2.1 -5})
(assert-equal '(sort {"b" "e" "a" "c" "d"})' {"a" "b" "c" "d" "e"})
(assert-equal '(sort {"5" 1 4 2 "3"})' {1 2 "3" 4 "5"})
(assert-equal '(rsort {"5" 1 4 2 "3"})' {"5" 4 "3" 2 1})
(assert-equal '(replace 1 2 {1 2 1})' {2 2 2})
(assert-equal '(list 1 2 3 4 5)' {1 2 3 4 5})

(printf "----")
(printf "Testing string functions...")
(printf "----")

(assert-equal '(len "hello")' 5)
(assert-equal '(head "hello")' "h")
(assert-equal '(tail "hello")' "ello")
(assert-equal '(take 4 "hello")' "hell")
(assert-error '(take 10 "hello")')
(assert-equal '(drop 3 "hello")' "lo")
(assert-error '(drop 10 "hello")')
(assert-equal '(split-at 2 "hello")' {"he" "llo"})
(assert-equal '(split-by "," "1,2,3")' {"1" "2" "3"})
(assert-error '(split-by 2 "hello")')
(assert-equal '(nth 1 "hello")' "e")
(assert-equal '(slice 1 3 "hello")' "ell")
(assert-error '(slice 10 3 "hello")')
(assert-error '(slice 1 30 "hello")')
(assert-equal '(splice 1 2 "a" "hello")' "halo")
(assert-error '(splice 10 2 "a" "hello")')
(assert-error '(splice 1 20 "a" "hello")')
(assert-equal '(index-of "e" "hello")' 1)
(assert-equal '(join "1" "2" "3")' "123")
(assert-equal '(+ "1" "2" "3")' "123")
(assert-equal '(pad 5 "0" "1")' "10000")
(assert-equal '(format "Hello %!" "Ben")' "Hello Ben!")
(assert-equal '(format "I have % apples and % pears." 6 32)' "I have 6 apples and 32 pears.")
(assert-equal '(format "It\'s 100% correct.")' "It's 100% correct.")
(assert-equal '(format "This is 100\% %." "too")' "This is 100% too.")
(assert-equal '(reverse "12345")' "54321")
(assert-error '(sort "53124")')
(assert-error '(rsort "53124")')
(assert-equal '(filter (lambda {x} {not (contains x {"a" "e" "i" "o" "u"})}) "Will you see ham?")' "Wll y s hm?")
(assert-error '(wrap 10 {1 2 3})')
(assert-equal '(wrap 10 "The quick brown fox jumps over the lazy dog")' "The quick \nbrown fox \njumps over\nthe lazy \ndog")
(assert-equal '(wrap 5 "11111\n2222222222\n333\n44")' "11111\n2222-\n2222-\n22\n333\n44")
(assert-equal '(replace "bleep" "****" "This is bleeping great.")' "This is ****ing great.")
(assert-equal '(trim "  Hello  ")' "Hello")
(assert-equal '(rtrim "  Hello  ")' "  Hello")
(assert-equal '(ltrim "  Hello  ")' "Hello  ")


(printf "----")
(printf "Testing buffer functions...")
(printf "----")

(def {my-buffer} (create-buffer 32))
(assert-equal '(len my-buffer)' 32)

; Fills the buffer with sequentially numbered bytes
(fun {fill-buffer b:Buffer start:Byte} {
    map-with-iterator (lambda {byte:Byte idx:Byte} {+ idx start}) b
})
(set {my-buffer} (fill-buffer my-buffer 0))
(assert-equal '(head my-buffer)' (create-buffer 1))
(assert-equal '(tail my-buffer)' (fill-buffer (create-buffer 31) 1))
(assert-equal '(first my-buffer)' 0)
(assert-equal '(second my-buffer)' 1)
(assert-equal '(last my-buffer)' 31)
(assert-equal '(nth 3 my-buffer)' 3)
(assert-equal '(drop 3 my-buffer)' (fill-buffer (create-buffer 29) 3))
(assert-error '(drop 64 my-buffer)')
(assert-equal '(join (create-buffer 1) 0xFF)' (put-byte (create-buffer 2) 1  0xFF))
(assert-equal '(join (create-buffer 1) {0xFE 0xFF})' (put-byte (put-byte (create-buffer 3) 1  0xFE) 2 0xFF))
(assert-equal '(join (create-buffer 1) 256)' (put-unsigned-long (create-buffer 9) 1  256))
(assert-equal '(take 4 my-buffer)' (fill-buffer (create-buffer 4) 0))
(set {my-buffer} (buffer-with-bytes 0x00 0x01 0x02 0x03))
(assert-equal '(split-at 2 my-buffer)' (list (buffer-with-bytes 0x00 0x01) (buffer-with-bytes 0x02 0x03)))
(assert-equal '(split-by 0x01 my-buffer)' (list (buffer-with-bytes 0x00) (buffer-with-bytes 0x02 0x03)))
(assert-equal '(slice 1 2 my-buffer)' (buffer-with-bytes 0x01 0x02))
(assert-error '(slice 10 3 my-buffer)')
(assert-error '(slice 1 30 my-buffer)')
(assert-equal '(splice 1 2 0xFF my-buffer)' (buffer-with-bytes 0x00 0xFF 0x03))
(assert-equal '(splice 1 2 {0xFE 0xFF} my-buffer)' (buffer-with-bytes 0x00 0xFE 0xFF 0x03))
(assert-equal '(splice 3 1 {0xFE 0xFF} my-buffer)' (buffer-with-bytes 0x00 0x01 0x02 0xFE 0xFF))
(assert-equal '(splice 4 0 {0xFE 0xFF} my-buffer)' (buffer-with-bytes 0x00 0x01 0x02 0x03 0xFE 0xFF))
(assert-error '(splice 1 20 0xFE my-buffer")')
(assert-error '(splice 10 1 0xFE my-buffer")')
(assert-equal '(index-of 0x02 my-buffer)' 2)
(assert-equal '(map (lambda {x} {+ x 0x01}) (buffer-with-bytes 0x01 0x02 0x03))' (buffer-with-bytes 0x02 0x03 0x04))
(assert-equal '(filter (lambda {x} {> x 0x05}) (buffer-with-bytes 0x08 0x02 0x09))' (buffer-with-bytes 0x08 0x09))
(assert-equal '(reduce (lambda {acc x} {+ acc x}) 0 (buffer-with-bytes 0x01 0x02 0x03))' 0x06)
(assert-equal '(buffer-map (buffer-with-bytes 0x03 0x02 0x01) 1 (lambda {bytes idx} {idx}))' (buffer-with-bytes 0x00 0x01 0x02))
(assert-equal '(replace 0x00 0xFF (buffer-with-bytes 0x00 0x01 0x00))' (buffer-with-bytes 0xFF 0x01 0xFF))

(fun {check-bytes buffer:Buffer stride:Integer func:Function value:Integer} {
    (do
        (fun {check-byte idx:Integer} {
            if (< (+ idx stride) (len buffer))
                {if (== (func buffer idx) value)
                    {check-byte (+ idx 1 stride)}
                    {printf "URK % '%'" idx (func buffer idx)}
                }
                {true}
        })
        (check-byte 0)
    )
})

(set {my-buffer} (create-buffer 8))

; Test set uint8
(loop 8 (lambda {i} {
    (set {my-buffer} (put-byte my-buffer i 0xFF))
}))
(assert-true '(check-bytes my-buffer 0 get-byte 0xFF)')

(loop 8 (lambda {i} {
    (set {my-buffer} (put-byte my-buffer i 0x7F))
}))
(assert-true '(check-bytes my-buffer 0 get-byte 0x7F)')

; Test set sint8
(loop 8 (lambda {i} {
    (set {my-buffer} (put-signed-char my-buffer i -1))
}))
(assert-true '(check-bytes my-buffer 0 get-signed-char -1)')

(loop 8 (lambda {i} {
    (set {my-buffer} (put-signed-char my-buffer i 127))
}))
(assert-true '(check-bytes my-buffer 0 get-signed-char 127)')

(loop 8 (lambda {i} {
    (set {my-buffer} (put-signed-char my-buffer i -128))
}))
(assert-true '(check-bytes my-buffer 0 get-signed-char -128)')

; Test set uint16
(loop 4 (lambda {i} {
    (set {my-buffer} (put-unsigned-short my-buffer (* i 2) 65535))
}))
(assert-true '(check-bytes my-buffer 1 get-unsigned-short 65535)')

(loop 4 (lambda {i} {
    (set {my-buffer} (put-unsigned-short my-buffer (* i 2) 32767))
}))
(assert-true '(check-bytes my-buffer 1 get-unsigned-short 32767)')

; Test set sint16
(loop 4 (lambda {i} {
    (set {my-buffer} (put-signed-short my-buffer (* i 2) -1))
}))
(assert-true '(check-bytes my-buffer 1 get-signed-short -1)')

(loop 4 (lambda {i} {
    (set {my-buffer} (put-signed-short my-buffer (* i 2) 32767))
}))
(assert-true '(check-bytes my-buffer 1 get-signed-short 32767)')

(loop 4 (lambda {i} {
    (set {my-buffer} (put-signed-short my-buffer (* i 2) -32768))
}))
(assert-true '(check-bytes my-buffer 1 get-signed-short -32768)')


; Test set uint32
(loop 2 (lambda {i} {
    (set {my-buffer} (put-unsigned-integer my-buffer (* i 4) 4294967295))
}))
(assert-true '(check-bytes my-buffer 3 get-unsigned-integer 4294967295)')

(loop 2 (lambda {i} {
    (set {my-buffer} (put-unsigned-integer my-buffer (* i 4) 2147483647))
}))
(assert-true '(check-bytes my-buffer 3 get-unsigned-integer 2147483647)')

; Test set sint32
(loop 2 (lambda {i} {
    (set {my-buffer} (put-signed-integer my-buffer (* i 4) -2147483648))
}))
(assert-true '(check-bytes my-buffer 3 get-signed-integer -2147483648)')

(loop 2 (lambda {i} {
    (set {my-buffer} (put-signed-integer my-buffer (* i 4) 2147483647))
}))
(assert-true '(check-bytes my-buffer 3 get-signed-integer 2147483647)')

(loop 2 (lambda {i} {
    (set {my-buffer} (put-signed-integer my-buffer (* i 4) -1))
}))
(assert-true '(check-bytes my-buffer 3 get-signed-integer -1)')

; Test set uint64

(set {my-buffer} (put-unsigned-long my-buffer 0 1))
(assert-equal '(get-unsigned-long my-buffer 0)' 1)

(set {my-buffer} (put-unsigned-long my-buffer 0 9223372036854775807))
(assert-equal '(get-unsigned-long my-buffer 0)' 9223372036854775807)

; Test set sint64

(set {my-buffer} (put-signed-long my-buffer 0 1))
(assert-equal '(get-signed-long my-buffer 0)' 1)

(set {my-buffer} (put-signed-long my-buffer 0 9223372036854775807))
(assert-equal '(get-signed-long my-buffer 0)' 9223372036854775807)

(set {my-buffer} (put-signed-long my-buffer 0 -9223372036854775807))
(assert-equal '(get-signed-long my-buffer 0)' -9223372036854775807)

(set {my-buffer} (put-signed-long my-buffer 0 -1))
(assert-equal '(get-signed-long my-buffer 0)' -1)

(printf "----")
(printf "Testing dictionary functions...")
(printf "----")

(assert-equal '(def {x} (dict))(set-prop {x name} "Ben")(x name)' "Ben")
(assert-error '(def {x} (dict))(set-prop {x 11} "Ben")')
(assert-equal '((dict name:"Ben" age:41) name)' "Ben")
(assert-equal '((dict name:"Ben" age:41) age)' 41)
(assert-error '((dict name:"Ben" age:41) job)')
(assert-almost-equal '(def {x} (dict name:"Ben" age:41))(set-prop {x age} 41.5)(x age)' 41.5)
(assert-equal '(def {x} (dict name:"Ben" age:41))(set-prop {x home} "UK")(x home)' "UK")
(assert-error '((dict name:"Ben" age:41) job)')


(printf "----")
(printf "Testing file functions...")
(printf "----")

(def {data} (buffer-with-bytes 0x00 0x01 0x02 0x03))
(assert-equal '(write-file "output.data" data)(read-file "output.data")' data)
(assert-equal '(write-file "output.data" "Hello, world.")(to-string (read-file "output.data"))' "Hello, world.")

(printf "----")
(printf "Testing mathematical functions...")
(printf "----")

(assert-true '(is-number 4)')
(assert-true '(is-number -4)')
(assert-true '(is-number 0.4)')
(assert-true '(is-number -44.4)')
(assert-true '(is-number 0x00)')
(assert-false '(is-number "six")')
(assert-equal '(abs -4)' 4)
(assert-error {abs "hello"})
(assert-equal '(floor 99.999)' 99)
(assert-equal '(floor -99.999)' -100)
(assert-equal '(ceil 99.999)' 100)
(assert-equal '(ceil -99.999)' -99)
(assert-equal '(round 99.999)' 100)
(assert-equal '(round 99.5)' 100)
(assert-equal '(round 99.45)' 99)
(assert-equal '(to-integer 99.45)' 99)
(assert-equal '(to-float 99)' 99)
(assert-equal '(average 0 10)' 5)
(assert-equal '(average -10 -20)' -15)
(assert-equal '(average 3 6 9)' 6)
(assert-equal '(square 2)' 4)
(assert-equal '(square -2)' 4)
(assert-equal '(square 0x04)' 0x10)
(assert-equal '(square 0x10)' 0x00)
(assert-error '(square "hello")')
(assert-error '(square {1 2 3})')
(assert-equal '(cube 2)' 8)
(assert-equal '(cube -2)' -8)
(assert-equal '(cube 0x04)' 0x40)
(assert-equal '(cube 0x10)' 0x00)
(assert-error '(cube "hello")')
(assert-error '(cube {1 2 3})')
(assert-almost-equal '(sqrt 4)' 2)
(assert-almost-equal '(sqrt 9)' 3)
(assert-almost-equal '(sqrt 99)' 9.9498)

(printf "----")
(printf "Testing type description functions...")
(printf "----")
(assert-true '(is-number 1)')
(assert-true '(is-number -1.0)')
(assert-true '(is-number 0x00)')
(assert-true '(is-number 0xFFFF)')
(assert-false '(is-number "hello")')
(assert-false '(is-number {"hello"})')
(assert-true '(is-string "hello")')
(assert-false '(is-string 1)')
(assert-false '(is-string {1 2 3})')
(assert-true '(is-list {1 2 3})')
(assert-false '(is-list 1)')
(assert-false '(is-list "hello")')
(assert-equal '(type-of 1)' Integer)
(assert-equal '(type-of -1)' Integer)
(assert-equal '(type-of 1.0)' Float)
(assert-equal '(type-of -1.0)' Float)
(assert-equal '(type-of 0xFF)' Byte)
(assert-equal '(type-of 0xf0)' Byte)
(assert-equal '(type-of 0xF000)' Integer)
(assert-equal '(type-of "hello")' String)
(assert-equal '(type-of (dict))' Dictionary)
(def-type {Thing x})
(assert-equal '(type-of (Thing x:1))' Thing)
(assert-equal '(type-of (create-buffer 0))' Buffer)
(assert-equal '(type-of +)' Function)
(assert-equal '(type-of len)' Function)
(assert-equal '(type-of type-of)' Function)
(assert-equal '(type-of (lambda {who} {printf "Hi %" who}))' Function)
(assert-equal '(type-of {1 2 3 4})' List)
(assert-equal '(type-of Integer)' Type)

(printf "----")
(printf "Testing type specifiers...")
(printf "----")
(assert-equal '(def {x:Byte} 10) x' 0x0A)
(assert-equal '(def {x:Float} 10) x' 10)
(assert-equal '(def {x:Float} 10) (type-of x)' Float)
(assert-equal '(def {x:Integer} 10) x' 10)
(assert-equal '(def {x:Integer} 10.2) x' 10)
(assert-equal '(def {x:Integer} 10) (type-of x)' Integer)
(assert-equal '(def {x:Integer} 10.2) (type-of x)' Integer)
(assert-error '(def {x:Integer} 10)(set {x} "hello")')
(assert-error '(def {x:Integer} 10)(set {x} {1 2 3})')

(printf "----")
(printf "Testing type conversion...")
(printf "----")
(assert-equal '(to-string (buffer-with-bytes 0x48 0x65 0x6C 0x6C 0x6F 0x00))' "Hello")
(assert-equal '(to-number "1")' 1)
(assert-equal '(type-of (to-number "1"))' Integer)
(assert-equal '(to-number "0x01")' 0x01)
(assert-equal '(type-of (to-number "0x01"))' Byte)
(assert-almost-equal '(to-number "1.2")' 1.2)
(assert-equal '(type-of (to-number "1.2"))' Float)


(printf "----")
(printf "Testing timing functions...")
(printf "----")
(assert-greater-than '(def {then} (cpu-time-since 0)) then' 0)
(assert-true '(< (cpu-time-since 0) (cpu-time-since 0))')
(assert-true '(def {then} (cpu-time-since 0)) (> (cpu-time-since then) 0)')
(assert-true '(def {then} (cpu-time-since 0)) (< (cpu-time-since then) then)')


(printf "----")
(printf "%" (test-result-summary results))
(printf "----")

; Return '1' if we failed a test so make knows it isn't working right
(exit (!= (results executed) (results passed)))

